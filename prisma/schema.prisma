// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  username    String        @unique
  password    String
  created_at  DateTime      @default(now())
  lastLogin   DateTime?     @updatedAt
  active      Boolean       @default(true)
  is_deleted  Boolean       @default(false)
  deleted_at  DateTime?
  Profile     Profile?
  Transaction Transaction[]
  Category    Category[]
  UserRoles   UserRoles[]

  @@unique([is_deleted, deleted_at])
}

model Profile {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction {
  id String @id @default(uuid())

  user             User            @relation(fields: [userId], references: [id])
  userId           String
  transaction_date DateTime        @default(now())
  transaction_type TransactionType @default(EXPENSE)
  amount           BigInt          @default(0)
  created_at       DateTime        @default(now())
  updated_at       DateTime?       @updatedAt
  Category         Category?       @relation(fields: [categoryId], references: [id])
  categoryId       String?
  description      String?
  note             String?

  @@unique([userId, transaction_date])
}

model Category {
  id          String          @id @default(uuid())
  name        String
  type        TransactionType
  description String?
  created_at  DateTime        @default(now())
  Transaction Transaction[]
  user        User            @relation(fields: [userId], references: [id])
  userId      String

  @@unique([name, type])
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  RolePermissions RolePermissions[]
  UserRoles       UserRoles[]
}

model UserRoles {
  User   User   @relation(fields: [userId], references: [id])
  userId String
  Role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Permission {
  id         String   @id @default(uuid())
  url        String
  method     String
  created_at DateTime @default(now())

  RolePermissions RolePermissions[]
}

model RolePermissions {
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  Permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@id([roleId, permissionId])
}
